{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1mNR5o2tdXgHILX_d-eK4VmbcXW5ucN3D","timestamp":1681834947135}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["\n","\n","Create two tower NNs, to create the embeddings for X and Y. Cache the embeddings.\n","Perform Candidate generation (embedding clustering and comparison).\n","Run second two tower for ranking the candidate videos\n","Run multidata-multilabel"],"metadata":{"id":"hXKFCQXFq9ic"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"GrjIwnZE0VU2","executionInfo":{"status":"ok","timestamp":1681835007824,"user_tz":-60,"elapsed":13195,"user":{"displayName":"Divya Munshi","userId":"17600254578302357877"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"cd145d15-e9ca-4df7-de83-234ec55e1b8d"},"outputs":[{"output_type":"stream","name":"stdout","text":["user_y[:20] [1 4 3 4 1 1 2 0 4 1 0 2 3 3 2 4 1 3 3 3]\n","[1 4 3 4 1 1 2 0 4 1 0 2 3 3 2 4 1 3 3 3 0 4 1 0 2 0 3 1 0 2 0 1 4 4 4 3 1\n"," 3 2 0 2 4 1 4 1 3 4 2 2 2 4 3 0 2 4 1 2 3 3 0 3 3 1 3 1 2 4 0 4 1 0 0 4 1\n"," 2 2 2 3 1 3 0 0 0 1 4 4 0 3 3 0 2 2 1 2 0 2 1 0 4 4]\n","[0. 0. 0. ... 0. 0. 0.]\n"]}],"source":["import numpy as np\n","from sklearn.datasets import make_blobs\n","import matplotlib.pyplot as plt\n","import itertools\n","import random\n","import pandas as pd\n","import numpy as np\n","import torch \n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","from torchsummary import summary\n","import matplotlib.pyplot as plt\n","import re\n","import torch.nn.init as init\n","%matplotlib inline\n","\n","\n","\n","# Users params\n","random_state_users = 42\n","n_samples_users = 100\n","n_features_users = 20\n","n_clusters_users = 5\n","\n","\n","# Create random clusters of users\n","user_X, user_y = make_blobs(\n","    n_samples=n_samples_users,\n","    n_features=n_features_users,\n","    centers=n_clusters_users,\n","    random_state=random_state_users\n",")\n","\n","\n","# Items params\n","random_state_items = 12\n","n_samples_items = 300\n","n_features_items = 10\n","n_clusters_items = 10\n","\n","\n","# Create random clusters of items\n","item_X, item_y = make_blobs(\n","    n_samples=n_samples_items,\n","    n_features=n_features_items,\n","    centers=n_clusters_items,\n","    random_state=random_state_items\n",")\n","\n","\n","# Decide what the users like in terms\n","# of items. E.g. users in cluster 1 like\n","# \"most of the time\" items in cluster 3\n","print(\"user_y[:20]\", user_y[:20])\n","# print(\"item_y[:20]\", item_y[:20])\n","\n","\n","# Then create an interaction table\n","# where \"most of the time\" users\n","# like their respective items\n","# user item interactions.\n","## success if item = 1 and user = 2 \n","## success if item between 6 and 10 and user between 2 and 5\n","labels = np.empty((n_samples_items*n_samples_users))\n","X_usr = np.empty((n_samples_items*n_samples_users, n_features_users))\n","X_item = np.empty((n_samples_items*n_samples_users, n_features_items))\n","\n","\n","\n","count = 0\n","for i in range(n_samples_users):\n","  for j in range(n_samples_items): \n","    if (item_y[j] ==3 and user_y[i] == 1) or (6<item_y[j]<9 and 2<user_y[i]<5 ):\n","       labels[count] = 1\n","       X_usr[count] = user_X[i]\n","       X_item[count] = item_X[j] \n","\n","    else: \n","      labels[count] = 0\n","      X_usr[count] = user_X[i]\n","      X_item[count] = item_X[j] \n","    count +=1 \n","\n","\n","# print(interactions)\n","# print(labels)\n","\n","Y = torch.tensor(labels, dtype=torch.float)\n","X_usr = torch.tensor(X_usr, dtype=torch.float)\n","X_item = torch.tensor(X_item,dtype=torch.float )\n","\n","# print(Y.shape, X_usr.shape, X_item.shape)\n","print(user_y)\n","print(labels)"]},{"cell_type":"markdown","source":["# Two Tower Class"],"metadata":{"id":"qVOYkDYW9fD6"}},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","\n","\n","class UserTower(nn.Module):\n","    def __init__(self, input_dim, embedding_dim):\n","        super(UserTower, self).__init__()\n","        self.tower = nn.Sequential(\n","            nn.Linear(input_dim, 128),\n","            nn.ReLU(), # activation function\n","            nn.Linear(128, embedding_dim),\n","        )\n","\n","    def forward(self, input):\n","        return self.tower(input)\n","\n","\n","class ItemTower(nn.Module):\n","    def __init__(self, input_dim, embedding_dim):\n","        super(ItemTower, self).__init__()\n","        self.tower = nn.Sequential(\n","            nn.Linear(input_dim, 128),\n","            nn.ReLU(),  # activation function\n","            nn.Linear(128, embedding_dim),\n","        )\n","\n","    def forward(self, input):\n","        return self.tower(input)\n","\n","\n","class TwoTowerNetwork(nn.Module):\n","    def __init__(self, input_dim_ta, input_dim_tb, embedding_dim):\n","        super(TwoTowerNetwork, self).__init__()\n","        self.tower_a = UserTower(input_dim_ta, embedding_dim)\n","        self.tower_b = ItemTower(input_dim_tb, embedding_dim)\n","\n","    def forward(self, input_a, input_b):\n","        embedding_a = self.tower_a(input_a)\n","        embedding_b = self.tower_b(input_b)\n","        return embedding_a, embedding_b"],"metadata":{"id":"hteeBtEh8t5o","executionInfo":{"status":"ok","timestamp":1681835008192,"user_tz":-60,"elapsed":372,"user":{"displayName":"Divya Munshi","userId":"17600254578302357877"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["# Initialise and run"],"metadata":{"id":"E6mU7UE69kSB"}},{"cell_type":"code","source":["# Initialize the two-tower network and optimizer\n","embedding_dim = 2\n","model = TwoTowerNetwork(n_features_users,n_features_items, embedding_dim)\n","optimizer = optim.Adam(model.parameters(), lr=0.01)\n","lossi = []\n","\n","# Define the binary cross-entropy loss function\n","loss_function = nn.BCELoss()\n","\n","\n","# Train the two-tower network\n","epochs = 10\n","for epoch in range(epochs):\n","    # Zero the gradients\n","    optimizer.zero_grad()\n","    # Forward pass through the two-tower network\n","    emb_user, emb_video = model(X_usr, X_item)\n","    dot_product = torch.matmul(emb_video, emb_user.T).diag().view(-1, 1)\n","    probability = torch.squeeze(torch.sigmoid(dot_product), dim=(1))\n","    loss = loss_function(probability, Y)\n","    lossi.append(loss.item())\n","    loss.backward()\n","    optimizer.step()\n","print(loss.item())\n","\n","plt.plot(lossi)\n","plt.show()\n"],"metadata":{"id":"uUi8Prz90WMI","executionInfo":{"status":"ok","timestamp":1681835081664,"user_tz":-60,"elapsed":73474,"user":{"displayName":"Divya Munshi","userId":"17600254578302357877"}},"colab":{"base_uri":"https://localhost:8080/","height":447},"outputId":"b4aa3d29-8184-441c-b374-3ca69568b92c"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["0.1294354945421219\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Save the model to disk\n","torch.save(model.state_dict(), \"model.pth\")\n","\n","\n"],"metadata":{"id":"NVrfFMgsckXU","executionInfo":{"status":"ok","timestamp":1681835081665,"user_tz":-60,"elapsed":10,"user":{"displayName":"Divya Munshi","userId":"17600254578302357877"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["\n","# Load the model weights from disk and initialize the model\n","checkpoint = torch.load(\"model.pth\")\n","m = model.load_state_dict(checkpoint)\n","\n","embedding_a, embedding_b = model(users, items)"],"metadata":{"id":"Dw_7_ps-cqVa","executionInfo":{"status":"error","timestamp":1681835081665,"user_tz":-60,"elapsed":8,"user":{"displayName":"Divya Munshi","userId":"17600254578302357877"}},"colab":{"base_uri":"https://localhost:8080/","height":198},"outputId":"6d929b2b-174d-48db-cd2a-24fcc83636e7"},"execution_count":5,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-f7584cb987d7>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_state_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcheckpoint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0membedding_a\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0membedding_b\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0musers\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mitems\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'users' is not defined"]}]},{"cell_type":"code","source":["\n","\n","emb_usr_np = emb_user.detach().numpy()\n","print(emb_usr_np)\n","plt.scatter(emb_usr_np[:,0], emb_usr_np[:,1])\n","emb_usr_1 = emb_usr_np[0]\n","plt.scatter(emb_usr_1[0], emb_usr_1[1],  color='red')\n","plt.title('User Embeddings')\n","plt.show()\n","emb_item_np = emb_video.detach().numpy()\n","print(emb_item_np)\n","plt.scatter(emb_item_np[:,0], emb_item_np[:,1])\n","plt.title('Video Embeddings')\n","plt.show()"],"metadata":{"id":"o2EkAJLgC-bI","executionInfo":{"status":"aborted","timestamp":1681835081666,"user_tz":-60,"elapsed":87657,"user":{"displayName":"Divya Munshi","userId":"17600254578302357877"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_euclidean_distances(emb, emb_dict): \n","  for i in range(len(emb_dict)): \n","    index = str(i)\n","    # print(emb_dict[i]['emb'])\n","    dist = np.linalg.norm(emb - emb_dict[i]['emb'])\n","    emb_dict[i]['dist'] = dist\n","    emb_dict[i]['index'] = i\n","    # print(emb_dict.head)\n","    sorted_dict = {k: v for k, v in sorted(emb_dict.items(), key=lambda item: item[1].get('dist', 0))}\n","\n","    top_5_values = [v for k, v in sorted_dict.items()][:5]\n","  print(sorted_dict)\n","  return top_5_values\n","\n","user_embs = np.unique(emb_usr_np, axis=0)\n","user_emb_dict = {}\n","for i in range(len(user_embs)):\n","  user_emb_dict[i] = {'emb' : user_embs[i]}\n","\n","\n","# print(user_emb_dict[0]['emb'])\n","\n","user_emb = user_embs[50]\n","# print(user_emb)\n","\n","\n","get_euclidean_distances(user_emb, user_emb_dict)\n"],"metadata":{"id":"xgey72XrZhrG","executionInfo":{"status":"aborted","timestamp":1681835081666,"user_tz":-60,"elapsed":87649,"user":{"displayName":"Divya Munshi","userId":"17600254578302357877"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from matplotlib import cm\n","\n","user_embs[:,0]\n","colors = range(len(user_embs))\n","cmap = cm.get_cmap('viridis', len(user_emb_dict))\n","# user_emb_dict.values()\n","plt.scatter(user_embs[:,0],user_embs[:,1], c=colors, cmap=cmap)"],"metadata":{"id":"1xJiKllTDyl-","executionInfo":{"status":"aborted","timestamp":1681835081667,"user_tz":-60,"elapsed":87649,"user":{"displayName":"Divya Munshi","userId":"17600254578302357877"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(user_emb_dict[0])"],"metadata":{"id":"WGFHq7Ty0qCI","executionInfo":{"status":"aborted","timestamp":1681835082113,"user_tz":-60,"elapsed":2,"user":{"displayName":"Divya Munshi","userId":"17600254578302357877"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"urR-l4MQq7XP"}},{"cell_type":"markdown","source":[],"metadata":{"id":"R5Hejcyuq8ZF"}}]}